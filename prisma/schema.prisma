// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  password       String
  name           String
  nickname       String?
  birth_date     DateTime?
  cell_phone     String?
  current_weight Float?
  height         Float?
  image_URL      String?
  lucky_numbers String[]
  progress       UserProgress?
  role            Role @default(USER)
  experience_date DateTime?
  last_login      DateTime?
  created_at     DateTime

  plan    Plan?   @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  plan_id String?

  PrizeDraw    PrizeDraw[]

  @@map("users")
}

model UserProgress {
  id                      String     @id @default(uuid())
  current_goal            String?
  initial_weight          Float?
  workouts                Json[]     // ==> { id: , category: string, finished_at: Date | null }
  current_streak          Int
  max_streak_reached      Int
  ia_analyses             String?
  ia_analyses_date        DateTime?

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique

  EquipmentTracking EquipmentTracking[]

  Activity Activity[]
  @@map("user_progress")
}

model Activity {
  id               String     @id @default(uuid())
  created_at       DateTime
  finished_at      DateTime?
  
  training          Training? @relation(fields: [training_id], references: [id])
  training_id String?

  userProgress     UserProgress @relation(fields: [user_progress_id], references: [id], onDelete: Cascade)
  user_progress_id String      

}

model EquipmentTracking {
  id                    String    @id @default(uuid())
  initial_weight        Int
  actual_weight         Int
  last_update           DateTime?
  active                Boolean

  userProgress     UserProgress @relation(fields: [user_progress_id], references: [id], onDelete: Cascade)
  user_progress_id String      

  gymEquipment     GymEquipment @relation(fields: [gym_equipment_id], references: [id], onDelete: Cascade)
  gym_equipment_id String        

  @@map("user_equipment_tracking")
}

model Training {
  id          String   @id @default(uuid())
  level       String
  category    String  
  type        String  
  age_group   String
  gender      String

  gymEquipment TrainingGymEquipment[] 

  @@map("training")
  Activity Activity[]
}

model GymEquipment {
  id               String   @id @default(uuid())
  name             String
  category         String
  sets             Int
  reps             Int
  cod              String
  status           String
  last_maintenance DateTime

  training TrainingGymEquipment[] 

  @@map("gym_equipment")
  EquipmentTracking EquipmentTracking[]
}

model TrainingGymEquipment {
  trainingId     String
  gymEquipmentId String

  training     Training   @relation(fields: [trainingId], references: [id])
  gymEquipment GymEquipment @relation(fields: [gymEquipmentId], references: [id])

  @@id([trainingId, gymEquipmentId]) 
}


model PrizeDraw {
  id           String    @id @default(uuid())
  prize        String
  drawn_number String?
  status       String
  created_at   DateTime  @default(now())
  finished_at  DateTime

  user      User?   @relation(fields: [winner_id], references: [id], onDelete: Cascade)
  winner_id String?

  @@map("prize_draws")
}

model Plan {
  id              String   @id @default(uuid())
  name            String   @unique
  price           Decimal
  created_at      DateTime @default(now())

  User User[]

  @@map("plans")
}

model Bill {
  id         String   @id @default(uuid())
  name       String
  category   String
  price     Decimal
  created_at DateTime @default(now())

  @@map("bills")
}

enum Role {
  USER
  ADMIN
}